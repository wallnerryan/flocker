# The whole file is a list of examples.  Unless otherwise indicated, examples
# are independent of each other.  For complicated examples that involve state
# that can't be established using a single HTTP request, requirements (in the
# form of other examples) can be declared.
#
# Some variable substitution is done to some of the content in this file.  The
# details of what and how are explained below but here is the list of variables
# that are globally defined and always available to be substituted:
#
# DOMAIN - The domain name of the cluster API server.
#
# NODE_N - The UUID specifically identifying one of the nodes of the
#     cluster.  Use any integer suffix for N starting with 0.  For example,
#     NODE_3 is replaced with the UUID for a hypothetical fourth cluster
#     node.  (Only NODE_0 and NODE_1 are implemented.  See FLOC-1288.)

-
  # Every element must have a unique identifier.  Documentation can use these
  # identifiers to select examples to include.  Examples can also declare other
  # examples as dependencies using this identifier.
  id:
    "get version"

  # Every example has docs explaining what it is an example of.
  doc: |
    Retrieve the version of the Flocker cluster.

  # Half of the example is the HTTP request you issue to trigger some behavior.
  # The harness knows this is HTTP so it turns this pseudo-HTTP into real HTTP
  # that can be rendered into the documentation or issued against a server for
  # validation.  Host (DOMAIN) and Content-Type (application/json) headers will
  # be automatically inserted.  %(VARIABLES)s in the request body get values
  # substituted in for them.
  request: |
    GET /v1/version HTTP/1.1

  # The other half of the example is the HTTP response you'll get if you do
  # this.  Ditto about the harness translating pseudo-HTTP into real HTTP.
  # %(VARIABLES)s are substituted in the response body as well.
  response: |
    HTTP/1.1 200 OK

    {
        "flocker": "0.4.0"
    }

-
  id:
    "create dataset"

  doc: |
    Specifying as few parameters as possible, create a new dataset on the
    cluster.  A node is specified to have the primary manifestation for the new
    dataset.  The unique dataset identifier is automatically generated by the
    server and returned with the response.

  request: |
    POST /v1/configuration/datasets HTTP/1.1

    {"primary": "%(NODE_0)s"}

  response: |
    HTTP/1.1 201 Created

    {"dataset_id": "a5f75af7-3fb9-4c1a-81ce-efeeb9f2c788", "primary": "%(NODE_0)s", "metadata": {}, "deleted": false}

-
  id:
    "create dataset with dataset_id"

  doc: |
    Create a new dataset with a specified unique identifier instead of letting
    the server generate it.

  request: |
    POST /v1/configuration/datasets HTTP/1.1

    {"dataset_id": "ad0a05dd-a1ed-449f-b44b-e1e2757bda00", "primary": "%(NODE_0)s"}

  response: |
    HTTP/1.1 201 Created

    {"dataset_id": "a5f75af7-3fb9-4c1a-81ce-efeeb9f2c788", "primary": "%(NODE_0)s", "metadata": {}, "deleted": false}

-
  id:
    "create dataset with duplicate dataset_id"

  doc: |
    Attempt to create a new dataset with a specified unique identifier that is
    already assigned to a dataset that exists.  This results in a failure to
    create the dataset and an error response.

  # Here's an example of a dependency.  Before this example is verified, the
  # examples identified by this list should be executed.  They can have
  # side-effects that this example may depend upon - for example, creating a
  # dataset with which to conflict.  `requires` is optional since some examples
  # may be simple enough not to require anything.
  requires:
    - "create dataset with dataset_id"

  request: |
    POST /v1/configuration/datasets HTTP/1.1

    {"dataset_id": "ad0a05dd-a1ed-449f-b44b-e1e2757bda00", "primary": "%(NODE_0)s"}

  response: |
    HTTP/1.1 409 Conflict

    {"description": "Specified dataset_id already associated with a dataset."}

-
  id:
    "create dataset with maximum_size"

  doc: |
    Create a new dataset that has an upper bound on the amount of data it will
    store.

  request: |
    POST /v1/configuration/datasets HTTP/1.1

    {"primary": "%(NODE_0)s", "maximum_size": 1073741824}

  response: |
    HTTP/1.1 201 Created

    {"dataset_id": "47440eff-e933-4de0-b56c-d3469b61421f", "primary": "%(NODE_0)s", "maximum_size": 1073741824, "metadata": {}, "deleted": false}

-
  id:
    "create dataset with metadata"

  doc: |
    Create a new dataset with some arbitrary key/value data associated with it.

  request: |
    POST /v1/configuration/datasets HTTP/1.1

    {"primary": "%(NODE_0)s", "metadata": {"name": "demo", "owner": "alice"}}

  response: |
    HTTP/1.1 201 Created

    {"dataset_id": "886ed03a-5606-453a-94a9-a1cbaf35164c", "primary": "%(NODE_0)s", "metadata": {"name": "demo", "owner": "alice"}, "deleted": false}


-
  id:
    "get configured datasets"

  doc: |
    Get a list of all datasets that have been configured for a
    deployment.  These datasets may or may not actually exist on the
    cluster.

  requires:
    - "create dataset with dataset_id"
    - "create dataset with metadata"

  request: |
    GET /v1/configuration/datasets HTTP/1.1

  response: |
    HTTP/1.0 200 OK

    [
      {"dataset_id": "a5f75af7-3fb9-4c1a-81ce-efeeb9f2c788", "primary": "%(NODE_0)s", "metadata": {}, "deleted": false},
      {"dataset_id": "886ed03a-5606-453a-94a9-a1cbaf35164c", "primary": "%(NODE_0)s", "metadata": {"name": "demo", "owner": "alice"}, "deleted": false}
    ]

-
  id:
    "update dataset with primary"

  doc: |
    Update a dataset with a new primary address. This will effectively move
    the dataset's contents, making them accessible on the new primary node.

  requires:
    - "create dataset with dataset_id"

  request: |
    POST /v1/configuration/datasets/886ed03a-5606-453a-94a9-a1cbaf35164c HTTP/1.1

    {"primary": "%(NODE_1)s"}

  response: |
    HTTP/1.1 200 OK

    {"dataset_id": "886ed03a-5606-453a-94a9-a1cbaf35164c", "primary": "%(NODE_1)s", "deleted": false}

-
  id:
    "update dataset with unknown dataset id"

  doc: |
    An attempt to update an unknown dataset results in a 404 Not Found response.

  request: |
    POST /v1/configuration/datasets/31d50a07-f679-4f95-ae0d-56c93513fbc2 HTTP/1.1

    {"primary": "%(NODE_1)s"}

  response: |
    HTTP/1.1 404 Not Found

    {"description": "Dataset not found."}

-
  id:
    "delete dataset"

  doc: |
    Delete a dataset.

  requires:
    - "create dataset with dataset_id"

  request: |
    DELETE /v1/configuration/datasets/886ed03a-5606-453a-94a9-a1cbaf35164c HTTP/1.1

  response: |
    HTTP/1.1 200 OK

    {"dataset_id": "886ed03a-5606-453a-94a9-a1cbaf35164c", "primary": "%(NODE_1)s", "deleted": true}

-
  id:
    "delete dataset with unknown dataset id"

  doc: |
    An attempt to delete an unknown dataset results in a 404 Not Found response.

  request: |
    DELETE /v1/configuration/datasets/31d50a07-f679-4f95-ae0d-56c93513fbc2 HTTP/1.1

  response: |
    HTTP/1.1 404 Not Found

    {"description": "Dataset not found."}

-
  id:
    "get state datasets"

  doc: |
    Get a list of all datasets in a deployment.

  request: |
    GET /v1/state/datasets HTTP/1.1

  response: |
    HTTP/1.1 200 OK

    [{"dataset_id": "47440eff-e933-4de0-b56c-d3469b61421f",
      "primary": "%(NODE_0)s",
      "maximum_size": 1073741824,
      "path": "/flocker/somearbitrarypath"}]

-
  id:
    "get configured containers"

  doc: |
    Get a list of all containers that have been configured for a
    deployment.

  requires:
    - "create container"
    - "create container with attached volume"

  request: |
    GET /v1/configuration/containers HTTP/1.1

  response: |
    HTTP/1.0 200 OK

    [
      {
        "node_uuid": "%(NODE_0)s",
        "name": "webserver",
        "image": "nginx:latest",
        "restart_policy": {"name": "never"}
      },
      {
        "node_uuid": "%(NODE_1)s",
        "name": "webserver2",
        "image": "nginx:latest",
        "volumes": [{"dataset_id": "886ed03a-5606-453a-94a9-a1cbaf35164c",
                     "mountpoint": "/usr/share/nginx/html"}],
        "restart_policy": {"name": "never"}
      }
    ]

-
  id:
    "get actual containers"

  doc: |
    Get a list of all containers that are present in the cluster.

  requires:
    - "create container"

  request: |
    GET /v1/state/containers HTTP/1.1

  response: |
    HTTP/1.0 200 OK

    [
      {
        "node_uuid": "%(NODE_0)s",
        "host": "10.0.0.3",
        "name": "webserver",
        "image": "nginx:latest",
        "restart_policy": {"name": "never"},
        "running": false
      },
      {
        "node_uuid": "%(NODE_0)s",
        "host": "10.0.0.3",
        "name": "database",
        "image": "postgres:latest",
        "restart_policy": {"name": "on-failure", "maximum_retry_count": 5},
        "running": true
      },
    ]

-
  id:
    "move container"

  doc: |
    Move an existing named container (and any attached datasets) to a new node.

  request: |
    POST /v1/configuration/containers/webserver HTTP/1.1

    {"node_uuid": "%(NODE_1)s"}

  response: |
    HTTP/1.1 200 OK

    {"node_uuid": "%(NODE_1)s",
     "name": "webserver",
     "image": "nginx:latest",
     "restart_policy": {"name": "never"}}

-
  id:
    "create container"

  doc: |
    Create a new container.

  request: |
    POST /v1/configuration/containers HTTP/1.1

    {"node_uuid": "%(NODE_0)s",
     "name": "webserver",
     "image": "nginx:latest"}

  response: |
    HTTP/1.1 201 Created

    {"node_uuid": "%(NODE_0)s",
     "name": "webserver",
     "image": "nginx:latest",
     "restart_policy": {"name": "never"}}

-
  id:
    "create container with links"

  doc: |
    Create a new container with links to one or more other containers.
    This will inject a series of environment variables in to your container that map the alias and local ports in the environment variable's label to the specified remote port in its value.
    For example, in the request data below, the created container will include an environment variable called POSTGRES_PORT_5432_TCP with a value of 54320.
    See https://docs.docker.com/userguide/dockerlinks/#environment-variables for more information on the environment created by container links.

  request: |
    POST /v1/configuration/containers HTTP/1.1

    {"node_uuid": "%(NODE_0)s",
     "name": "webserver",
     "image": "nginx:latest",
     "links": [{"alias":"postgres", "local_port": 5432, "remote_port": 54320}]}

  response: |
    HTTP/1.1 201 Created

    {"node_uuid": "%(NODE_0)s",
     "name": "webserver",
     "image": "nginx:latest",
     "restart_policy": {"name": "never"},
     "links": [{"alias":"postgres", "local_port": 5432, "remote_port": 54320}]}


-
  id:
    "create container with command line"

  doc: |
    Create a new container with a custom command line.

    The custom command line will be used with the Docker image's entry point.

  request: |
    POST /v1/configuration/containers HTTP/1.1

    {"node_uuid": "%(NODE_0)s",
     "name": "nc",
     "image": "busybox",
     "command_line": ["nc", "-l", "-p", 1234]}

  response: |
    HTTP/1.1 201 Created

    {"node_uuid": "%(NODE_0)s",
     "name": "nc",
     "image": "busybox",
     "restart_policy": {"name": "never"},
     "command_line": ["nc", "-l", "-p", 1234]}

-
  id:
    "create container with memory limit"

  doc: |
    Create a new container with a memory limit, in this example 250MB (250 * 1024 * 1024).

  request: |
    POST /v1/configuration/containers HTTP/1.1

    {"node_uuid": "%(NODE_0)s",
     "name": "webserver",
     "image": "nginx:latest",
     "memory_limit": 262144000}

  response: |
    HTTP/1.1 201 Created

    {"node_uuid": "%(NODE_0)s",
     "name": "webserver",
     "image": "nginx:latest",
     "restart_policy": {"name": "never"},
     "memory_limit": 262144000}

-
  id:
    "create container with cpu shares"

  doc: |
    Create a new container with CPU shares.

  request: |
    POST /v1/configuration/containers HTTP/1.1

    {"node_uuid": "%(NODE_0)s",
     "name": "webserver",
     "image": "nginx:latest",
     "cpu_shares": 512}

  response: |
    HTTP/1.1 201 Created

    {"node_uuid": "%(NODE_0)s",
     "name": "webserver",
     "image": "nginx:latest",
     "restart_policy": {"name": "never"},
     "cpu_shares": 512}

-
  id:
    "create container with attached volume"

  doc: |
    Create a new container with an existing dataset attached as a volume.

  requires:
    - "create dataset with dataset_id"

  request: |
    POST /v1/configuration/containers HTTP/1.1

    {"node_uuid": "%(NODE_1)s",
     "name": "webserver2",
     "image": "nginx:latest",
     "volumes": [{"dataset_id": "886ed03a-5606-453a-94a9-a1cbaf35164c",
                  "mountpoint": "/usr/share/nginx/html"}],
    }

  response: |
    HTTP/1.1 201 Created

    {"node_uuid": "%(NODE_1)s",
     "name": "webserver2",
     "image": "nginx:latest",
     "volumes": [{"dataset_id": "886ed03a-5606-453a-94a9-a1cbaf35164c",
                  "mountpoint": "/usr/share/nginx/html"}],
     "restart_policy": {"name": "never"}
    }

-
  id:
    "create container with restart policy"

  doc: |
    Create a new container with a restart policy.
    The value of restart_policy must be a dictionary with a "name" key, which in turn must be one of "never", "on-failure" or "always".
    If the value given for "name" is "on-failure", you may also optionally provide a "maximum_retry_count" value.
    This is a positive integer specifying the maximum number of attempts to restart a failed container.
    If a restart policy is not specified, the container will be created with a restart policy of "never".

  request: |
    POST /v1/configuration/containers HTTP/1.1

    {"node_uuid": "%(NODE_0)s",
     "name": "webserver",
     "image": "nginx:latest",
     "restart_policy": {"name": "on-failure", "maximum_retry_count": 5}}

  response: |
    HTTP/1.1 201 Created

    {"node_uuid": "%(NODE_0)s",
     "name": "webserver",
     "image": "nginx:latest",
     "restart_policy": {"name": "on-failure", "maximum_retry_count": 5}}

-
  id:
    "create container with environment"

  doc: |
    Create a new container with environment variables.

  request: |
    POST /v1/configuration/containers HTTP/1.1

    {"node_uuid": "%(NODE_0)s",
     "name": "webserver",
     "image": "nginx:latest",
     "environment": {"CONFIG_FILE": "/etc/nginx/nginx.conf"},
     "restart_policy": {"name": "never"}}

  response: |
    HTTP/1.1 201 Created

    {"node_uuid": "%(NODE_0)s",
     "name": "webserver",
     "image": "nginx:latest",
     "environment": {"CONFIG_FILE": "/etc/nginx/nginx.conf"},
     "restart_policy": {"name": "never"}}

-
  id:
    "create container with ports"

  doc: |
    Create a new container with port mappings.

  request: |
    POST /v1/configuration/containers HTTP/1.1

    {"node_uuid": "%(NODE_0)s",
     "name": "webserver",
     "image": "nginx:latest",
     "ports": [{"internal": 80, "external": 8080}],
     "restart_policy": {"name": "never"}}

  response: |
    HTTP/1.1 201 Created

    {"node_uuid": "%(NODE_0)s",
     "name": "webserver",
     "image": "nginx:latest",
     "ports": [{"internal": 80, "external": 8080}],
     "restart_policy": {"name": "never"}}

-
  id:
    "create container with duplicate name"

  doc: |
    Attempt to create a new container with a specified name that is already
    assigned to an existing container. This results in a failure to create the
    container and an error response.

  requires:
    - "create container"

  request: |
    POST /v1/configuration/containers HTTP/1.1

    {"node_uuid": "%(NODE_0)s",
     "name": "webserver",
     "image": "nginx:latest"}

  response: |
    HTTP/1.1 409 Conflict

    {"description": "The container name specified already exists."}

-
  id:
    "remove a container"

  doc: |
    Delete a container.

  requires:
    - "create a container"

  request: |
    DELETE /v1/configuration/containers/webserver HTTP/1.1

  response: |
    HTTP/1.1 200 OK

-
  id:
    "remove a container with unknown name"

  doc: |
    An attempt to delete an unknown container results in a 404 Not Found response.

  request: |
    DELETE /v1/configuration/containers/unknown_container HTTP/1.1

  response: |
    HTTP/1.1 404 Not Found

    {"description": "Container not found."}

-
  id: "list known nodes"

  doc: |
    A list of the known nodes in a cluster.

  request: |
    GET /v1/state/nodes

  response: |
    HTTP/1.1 200 OK

    [
      {
        "uuid": "%(NODE_0)s",
        "host": "10.0.0.3",
      {
        "uuid": "%(NODE_1)s",
        "host": "10.0.0.4",
      },
    ]
