# Copyright ClusterHQ Inc.  See LICENSE file for details.

"""
Testing utilities for ``flocker.ca``.
"""

import atexit
from tempfile import mkdtemp
from shutil import rmtree

from OpenSSL.crypto import X509Extension

from twisted.python.filepath import FilePath

from pyrsistent import PRecord, field

from ..ca import (
    RootCredential, ControlCredential, NodeCredential, UserCredential,
)


def assert_has_extension(test, credential, name, value):
    """
    Assert that the ``X509Extension`` with the matching name from the
    certificate has the given value.

    :param TestCase test: The current test.
    :param FlockerCredential certificate: Credential whose certificate we
        should inspect.
    :param bytes name: The name of the extension.
    :param bytes value: The data encoded in the extension.

    :raises AssertionError: If the extension is not found or has the wrong
        value.
    """
    expected = X509Extension(name, False, value)
    x509 = credential.certificate.original
    for i in range(x509.get_extension_count()):
        extension = x509.get_extension(i)
        if extension.get_short_name() == name:
            test.assertEqual(extension.get_data(), expected.get_data())
            return
    test.fail("Couldn't find extension {}.".format(name))


class CredentialSet(PRecord):
    """
    A full set of credentials for a CA.

    :ivar FilePath path: Directory where credentials reside.
    :ivar RootCredential root: The CA root credential.
    :ivar ControlCredential control: A control service credential.
    :ivar UserCredential user: A user credential.
    :ivar NodeCredential node: A CA root credentials.
    """
    path = field()
    root = field()
    control = field()
    user = field()
    node = field()

    @staticmethod
    def create():
        """
        :return: A new ``CredentialSet``.
        """
        directory = FilePath(mkdtemp())
        atexit.register(rmtree, directory.path)
        root = RootCredential.initialize(directory, b"mycluster")
        user = UserCredential.initialize(directory, root, u"allison")
        node = NodeCredential.initialize(directory, root)
        control = ControlCredential.initialize(directory, root, b"127.0.0.1")
        return CredentialSet(path=directory,
                             root=root, user=user, node=node, control=control)

    def copy_to(self, directory, control=False, user=False, node=False):
        """
        Copy certificates to destination directory with naming convention used
        by certificate-loading code (control service, node agents and
        clients).

        Always copies CA certificate.

        :param FilePath directory: Destination for files.
        :param bool control: Whether to copy control service certificate/key.
        :param bool node: Whether to copy node certificate/key.
        :param bool user: Whether to copy API client certificate/key.
        """
        self.path.child(b"cluster.crt").copyTo(directory.child(b"cluster.crt"))
        if control:
            self.path.globChildren(b"control-*.crt")[0].copyTo(
                directory.child(b"control-service.crt"))
            self.path.globChildren(b"control-*.key")[0].copyTo(
                directory.child(b"control-service.key"))
        if user:
            self.path.child(b"allison.crt").copyTo(
                directory.child(b"user.crt"))
            self.path.child(b"allison.key").copyTo(
                directory.child(b"user.key"))
        if node:
            uuid = self.node.uuid
            self.path.child(b"{}.crt".format(uuid)).copyTo(
                directory.child(b"node.crt"))
            self.path.child(b"{}.key".format(uuid)).copyTo(
                directory.child(b"node.key"))


# Cached CredentialSets generated by get_sets():
_credential_set1 = None
_credential_set2 = None


def get_credential_sets():
    """
    Get a pair of cached sets of CA-specific credentials.

    Since they are cached across tests they should not be modified.

    :return: Tuple, a pair of ``CredentialSet`` instances.
    """
    global _credential_set1, _credential_set2
    if _credential_set1 is None:
        _credential_set1 = CredentialSet.create()
        _credential_set2 = CredentialSet.create()
    return _credential_set1, _credential_set2
